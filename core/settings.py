"""
Django settings for shemmy project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/

NOTE: this sample print's all the configuration paths
"""

from pathlib import Path

from decouple import config, Csv

# TODO : setup or remove sentry stuff


# The ENVIRONMENT set's whether this is local, dev, or prod
# and can be used to conditionally define other settings as needed.
ENVIRONMENT = config("ENVIRONMENT", default="prod")


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
PROJECT_DIR = BASE_DIR / "core"

# HTDOCS_BASE is a fixed path for prod/staging, and an absolute path for dev
# (must be set for dev)
# /srv/sites/<site_name>/htdocs
HTDOCS_BASE = Path(__file__).resolve().parent.parent.parent.parent / "htdocs"

ALLOWED_HOSTS = config("ALLOWED_HOSTS", cast=Csv())

SECRET_KEY = config("DJANGO_SECRET_KEY", "django-insecure-=1-1_oshs)#-jzq!t8&ky)*o%2)5zy6s+$8qd*gm4%gy$*@lgl")

DEBUG = config("DEBUG", default=False, cast=bool)

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"

# Application definition

INSTALLED_APPS = [
    # Django stuff
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    # First Party
    "core",
    "blog",
    # Third Party
    "ckeditor",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            PROJECT_DIR / "templates",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "blog.context_processors.menu_items",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": config("POSTGRES_DB"),
        "USER": config("POSTGRES_USER"),
        "PASSWORD": config("POSTGRES_PASSWORD"),
        "HOST": config("POSTGRES_HOST", default="localhost"),
        "PORT": config("POSTGRES_PORT", default=5432, cast=int),
        "CONN_MAX_AGE": 600,
    }
}

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": [
            "redis://{}:{}".format(
                config("REDIS_HOST", default="localhost"),  # leader
                config("REDIS_PORT", default=6379, cast=int),  # leader
            ),
        ],
    }
}


AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 10,
        },
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
    {"NAME": "core.validators.NumberValidator"},
    {"NAME": "core.validators.UppercaseValidator"},
    {"NAME": "core.validators.LowercaseValidator"},
    {"NAME": "core.validators.SpecialCharacterValidator"},
]


LANGUAGE_CODE = "en-us"

TIME_ZONE = config("TIME_ZONE", default="America/Chicago")

USE_I18N = True

USE_L10N = True

USE_TZ = True

MEDIA_ROOT = HTDOCS_BASE / config("MEDIA_ROOT", "media")
STATIC_ROOT = HTDOCS_BASE / config("STATIC_ROOT", "static")
MEDIA_URL = config("MEDIA_URL", "/media/")
STATIC_URL = config("STATIC_URL", "/static/")

# Base URL to use when referring to full URLs within the Wagtail admin backend -
# e.g. in notification emails. Don't include '/backend' or a trailing slash
BASE_URL = config("BASE_URL")

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# ####################################################################
# Sentry Configuration
# ####################################################################

# sentry_sdk.init(
#     dsn=config("SENTRY_DSN"),
#     integrations=[DjangoIntegration()],
#     # Set traces_sample_rate to 1.0 to capture 100%
#     # of transactions for performance monitoring.
#     # We recommend adjusting this value in production,
#     traces_sample_rate=0.0,
#     # If you wish to associate users to errors (assuming you are using
#     # django.contrib.auth) you may enable sending PII data.
#     send_default_pii=True,
#     environment=config("SENTRY_ENVIRONMENT", default="prod"),
# )

if ENVIRONMENT == "local":

    def show_toolbar(request):
        return True

    INSTALLED_APPS += ("debug_toolbar",)
    INTERNAL_IPS = ["127.0.0.1"]
    MIDDLEWARE = [
        "debug_toolbar.middleware.DebugToolbarMiddleware",
    ] + MIDDLEWARE

    DEBUG_TOOLBAR_CONFIG = {
        "SHOW_TOOLBAR_CALLBACK": show_toolbar,  # Display toolbar regardless of IP
    }
